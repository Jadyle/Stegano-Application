
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


import os
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog, messagebox
import sys

import tkinter as tk
from tkinter.font import Font


# Determine the base path for assets
def get_base_path():
    if hasattr(sys, "_MEIPASS"):
        return Path(sys._MEIPASS) / "assets" / "frame1"
    return Path(__file__).parent / "assets" / "frame1"

ASSETS_PATH = get_base_path()

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
    



def gui_1_extract(window, main_frame):

    
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    from pathlib import Path
    from extract import decode_message

    def show_page_extract_success(message):

        page_hide_frame = tk.Frame(main_frame)
        
        from build.gui3 import gui_3_extract_success
        gui_3_extract_success(window, main_frame, message)
    
        page_hide_frame.pack(pady=20)


    main_frame.pack(fill=tk.BOTH, expand=True)

    

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 400,
        width = 600,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        0.0,
        0.0,
        600.0,
        400.0,
        fill="#1E043F",
        outline="")
    
    def select_image():
        try:
            # Open file dialog to select an image
            image_path = filedialog.askopenfilename(
                title="Select Image", filetypes=[("PNG files", "*.png")]
            )
            if image_path:
                # Display the selected file path in entry_1
                entry_1.delete(0, "end")  # Clear any existing text
                entry_1.insert(0, image_path)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to select image: {str(e)}")

    def extract_message():
        try:
            # Get the selected image path from entry_1
            image_path = entry_1.get().strip()
            if not image_path:
                messagebox.showerror("Error", "Please select an image file.")
                return

            # Decode the message into the image
            result, message = decode_message(image_path)

            # Check if the encoding was successful
            if result == True and message:  # Adjust based on your encode_message behavior
                show_page_extract_success(message)  # Show success page only on success
            else:
                messagebox.showinfo("Error", f"Failed to extract the message: {result}")
            
        except Exception as e:
            messagebox.showerror("Error", str(e))

    button_image_hover_1 = PhotoImage(
        file=relative_to_assets("button_hover_1.png"))

    def button_1_hover(e):
        button_1.config(
            image=button_image_hover_1
        )
    def button_1_leave(e):
        button_1.config(
            image=button_image_1
        )


    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: select_image(),
        relief="flat"
    )
    button_1.place(
        x=343.0,
        y=291.0,
        width=66.0,
        height=27.0
    )

    button_1.bind('<Enter>', button_1_hover)
    button_1.bind('<Leave>', button_1_leave)

    button_image_hover_2 = PhotoImage(
        file=relative_to_assets("button_hover_2.png"))

    def button_2_hover(e):
        button_2.config(
            image=button_image_hover_2
        )
    def button_2_leave(e):
        button_2.config(
            image=button_image_2
        )


    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: extract_message(), #Extract function
        relief="flat"
    )
    button_2.place(
        x=56.0,
        y=342.0,
        width=135.0,
        height=38.0
    )

    button_2.bind('<Enter>', button_2_hover)
    button_2.bind('<Leave>', button_2_leave)

    custom_font_l = Font(family="Terminal", size=20, weight="normal", underline=False)
    custom_font_s = Font(family="Terminal", size=15, weight="normal", underline=False)

    canvas.create_text(
        300.0,
        60.0,
        anchor="center",
        text="Stegano",
        fill="#FFFFFF",
        font=custom_font_l
    )

    canvas.create_text(
        60.0,
        270.0,
        anchor="nw",
        text="Choose an image to extract the secret",
        fill="#FFFFFF",
        font=custom_font_s
    )

    canvas.create_text(
        204.0,
        316.0,
        anchor="nw",
        text="*Only .png format is supported",
        fill="#7D35D5",
        font=("AnekKannada Regular", 10 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        196.5,
        305.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=60.0,
        y=296.0,
        width=273.0,
        height=16.0
    )

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        155.0,
        62.0,
        image=image_image_1
    )
    canvas.image_image_1 = image_image_1

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        444.0,
        62.0,
        image=image_image_2
    )
    canvas.image_image_2 = image_image_2
